/*
    This file was generated by the Gradle 'init' task.

    This generated file contains a sample Java library project to get you
    started. For more details on building Java & JVM projects, please refer to
    https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the
    Gradle documentation.
*/

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    jacoco
    checkstyle
    `maven-publish`
}

group = "com.maroontress"
version = "1.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url = uri("https://maroontress.github.io/maven")
    }
}

dependencies {
    api(libs.clione)

    // Use JUnit Jupiter for testing.
    testImplementation(libs.hamcrest)
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Replace Groovy-style task config with Kotlin DSL typed configuration
tasks.named<org.gradle.api.tasks.compile.JavaCompile>("compileJava") {
    options.encoding = "UTF-8"
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

tasks.named<org.gradle.api.tasks.compile.JavaCompile>("compileTestJava") {
    options.encoding = "UTF-8"
    sourceCompatibility = "21"
}

tasks.named<org.gradle.api.tasks.testing.Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")

    outputs.upToDateWhen { false }

    testLogging {
        showStandardStreams = true

        events = setOf(
            org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED,
            org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED,
            org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
            org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR
        )
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
        displayGranularity = 2
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

// Add/ensure jacoco toolVersion for consistent behavior
jacoco {
    toolVersion = "0.8.13"
}

tasks.named<org.gradle.testing.jacoco.tasks.JacocoReport>("jacocoTestReport") {
    dependsOn(tasks.named("test"))

    reports {
        // Ensure XML is generated (useful for CI / coverage collectors) and HTML as before
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco-html"))
    }
}

// Ensure the `check` lifecycle depends on the jacoco report so `./gradlew build` produces it
tasks.named("check") {
    dependsOn(tasks.named("jacocoTestReport"))
}

tasks.named<org.gradle.api.tasks.javadoc.Javadoc>("javadoc") {
    (options as org.gradle.external.javadoc.StandardJavadocDocletOptions).locale = "en_US"
    (options as org.gradle.external.javadoc.StandardJavadocDocletOptions).encoding = "UTF-8"
}

checkstyle {
    toolVersion = "11.0.0"
}

tasks.checkstyleMain {
    configFile = file("${rootDir}/config/checkstyle/main.xml")
}

tasks.checkstyleTest {
    configFile = file("${rootDir}/config/checkstyle/test.xml")
}

publishing {
    repositories {
        maven {
            name = "LocalFile"
            url = uri(project.properties["localMavenRepo"] ?: "./maven")
        }
    }
    publications {
        create<org.gradle.api.publish.maven.MavenPublication>("gpr") {
            from(components["java"])
        }
    }
}
